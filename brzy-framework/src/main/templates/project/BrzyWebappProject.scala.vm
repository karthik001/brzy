
import sbt._
import sbt.FileUtilities._

class BrzyWebappProject(info: ProjectInfo) extends DefaultWebProject(info) {

  override def mainJavaSourcePath = "src" / "java"
  override def mainScalaSourcePath = "src" / "scala"
  override def mainResourcesPath = "src" / "resources"
  override def testJavaSourcePath = "test" / "java"
  override def testScalaSourcePath = "test" / "scala"
  override def testResourcesPath = "test" / "resources"
  override def webappPath = "webapp"
  override def managedDependencyPath = "project" / "lib"

  val jetty7 = "org.eclipse.jetty" % "jetty-webapp" % "7.0.2.RC0" % "test"

  // brzy command execution classpath configuration
  val brzyPlugin = config("brzy") hide
  def brzyClasspath = managedClasspath(brzyPlugin) +++ ("project" / "brzy-plugins").descendentsExcept("*.jar", "lib")

  // repositories
#foreach($repo in $repositories)
#if($repo.id().get())
  val repository_$velocityCount = "${repo.id().get()}" at "${repo.url().get()}"
#end
#end

  // dependencies
  override def ivyXML =
    <dependencies>
	  <dependency org="org.slf4j" name="slf4j-api" rev="1.5.11" conf="brzy" />
	  <dependency org="commons-lang" name="commons-lang" rev="2.5" conf="brzy" />
	  <dependency org="org.brzy" name="brzy-config" rev="0.2" conf="brzy" />
	  <dependency org="org.brzy" name="brzy-shell" rev="0.2" conf="brzy" />
#foreach($dep in $dependencies)
#if($dep.org().get())
      <dependency org="${dep.org().get()}" name="${dep.name().get()}" rev="${dep.rev().get()}" conf="${dep.conf().get()}" #if(!$dep.transitive().get()) transitive="false" #end >
#if($dep.excludes().isDefined())
#foreach($exclude in $$dep.excludes().get())
	    <exclude org="${exclude.org().get()}" name="${exclude.name().get()}" />
#end
#end
	  </dependency>
#end 
#end
    </dependencies>


#set($H='#')

  lazy val prePackage = task {
    val logger = new ConsoleLogger
    createDirectory(webappPath/"WEB-INF",logger)
    createDirectory(webappPath/"WEB-INF"/"classes",logger)
    createDirectory(webappPath/"WEB-INF"/"lib",logger)
    copyFile(path("brzy-webapp.b.yml"), webappPath/"WEB-INF"/"classes"/"brzy-webapp.b.yml", logger)
    val pluginConfigPaths = ("project"/"brzy-plugins" $H$H) ** "brzy-plugin.b.yml"
   	copy(pluginConfigPaths.get , webappPath/"WEB-INF"/"classes"/"brzy-plugins",logger)
    None
  }

  override def packageAction = super.packageAction dependsOn(prePackage,logbackXml,webXml)

  def logbackXmlAction(args: List[String]) = runTask(Some("org.brzy.shell.LogBackXmlMain"), brzyClasspath, args)

  lazy val logbackXml =  {
    val outDir = {webappPath/"WEB-INF"/"classes"}.toString
    val config = path("brzy-webapp.b.yml").toString
    logbackXmlAction(List(config,"development",outDir))
  }.dependsOn(prePackage) describedAs "Generates the logback.xml file"

  def webXmlAction(args: List[String]) = runTask(Some("org.brzy.shell.WebXmlMain"), brzyClasspath, args)

  lazy val webXml = {
    val outDir = {webappPath/"WEB-INF"}.toString
    val config = path("brzy-webapp.b.yml").toString
    webXmlAction(List(config,"development",outDir))
  }.dependsOn(prePackage) describedAs "Generates the web.xml file"

  lazy val delWebXml = {
    FileUtilities.clean(webappPath / "WEB-INF", new ConsoleLogger)
  }

}